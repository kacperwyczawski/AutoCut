@using AutoCut.Core.Panels
@using Blazor.Extensions
@using Blazor.Extensions.Canvas
@inject ILogger<Visualization> Logger

<MudPaper
    Class="mt-4 pa-2 d-flex align-content-center justify-center"
    Style="overflow: scroll">
    <div style="@CanvasContainerCss">
        <BECanvas
            Width="@((int)(OptimizedStockPanel.StockPanel.Panel.Rectangle.Length / MagicRatio) + 10)"
            Height="@((int)(OptimizedStockPanel.StockPanel.Panel.Rectangle.Width / MagicRatio) + 10)"
            @ref="_canvasReference">
        </BECanvas>
    </div>
</MudPaper>

@code
{
    [Parameter]
    [EditorRequired]
    public required OptimizedStockPanel OptimizedStockPanel { get; set; }

    private int CanvasWidth => (int)(OptimizedStockPanel.StockPanel.Panel.Rectangle.Length / MagicRatio) + 1;
    private int CanvasHeight => (int)(OptimizedStockPanel.StockPanel.Panel.Rectangle.Width / MagicRatio) + 1;

    private string CanvasContainerCss => $"width: {CanvasWidth}px;" +
                                         $"height: {CanvasHeight}px;" +
                                         "position: relative;" +
                                         "overflow-y: hidden;" +
                                         "overflow-x: scroll;";

    private BECanvas? _canvasReference;

        private const decimal MagicRatio = 3.75m; // standard stock panel width (2800) divided by max width of canvas (~750)

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        const string primaryColor = "#594ae2ff";
        const string tertiaryColor = "#1ec8a5ff";

        var context = await _canvasReference.CreateCanvas2DAsync();

    // draw stock panel
        await context.SetStrokeStyleAsync(primaryColor);
        await context.StrokeRectAsync(0, 0,
            (double)(OptimizedStockPanel.StockPanel.Panel.Rectangle.Length / MagicRatio),
            (double)(OptimizedStockPanel.StockPanel.Panel.Rectangle.Width / MagicRatio));

    // draw panels
        await context.SetStrokeStyleAsync(tertiaryColor);
        foreach (var panel in OptimizedStockPanel.Panels)
        {
            await context.StrokeRectAsync(
                (double)(panel.PositionedRectangle.Position.X / MagicRatio),
                (double)(panel.PositionedRectangle.Position.Y / MagicRatio),
                (double)(panel.PositionedRectangle.Rectangle.Length / MagicRatio),
                (double)(panel.PositionedRectangle.Rectangle.Width / MagicRatio));
        }
    }
}